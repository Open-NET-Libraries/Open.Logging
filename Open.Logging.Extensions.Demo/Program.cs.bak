using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Open.Logging.Extensions.Demo;
using Open.Logging.Extensions.SpectreConsole;
using Spectre.Console;
using System.ComponentModel;

namespace Open.Logging.Extensions.Demo;

/// <summary>
/// Main program entry point for the logging demos.
/// </summary>
public class Program
{
    /// <summary>
    /// Main entry point for the application.
    /// </summary>
    /// <param name="args">Command line arguments.</param>    public static async Task<int> Main(string[] args)
    {
        // Ensure args is not null
        args ??= Array.Empty<string>();
        
        if (args.Length == 0)
        {
            // Show menu when no arguments provided
            return await ShowMainMenuAsync().ConfigureAwait(false);
        }
        // Check for command line arguments
        else if (args[0].Equals("file", StringComparison.OrdinalIgnoreCase))
        {
            // Run the file logger demo directly
            FileLoggerDemoProgram.RunDemo();
            return 0;
        }
        else if (args[0].Equals("rolling", StringComparison.OrdinalIgnoreCase))
        {
            // Run the file logger rolling demo directly
            await FileLoggerRollingDemoProgram.RunAsync(args).ConfigureAwait(false);
            return 0;
        }
        else if (args[0].Equals("test", StringComparison.OrdinalIgnoreCase))
        {
            // Run the test demo
            return await TestDemoAsync().ConfigureAwait(false);
        }
        else if (args[0].Equals("menu", StringComparison.OrdinalIgnoreCase))
        {
            return await ShowMainMenuAsync().ConfigureAwait(false);
        }
        else
        {
            Console.WriteLine($"Unknown command: {args[0]}");
            Console.WriteLine("Available commands: file, rolling, test, menu");
            return 1;
        }
    }

    /// <summary>
    /// Helper function to show the main menu.
    /// </summary>
    private static async Task<int> ShowMainMenuAsync()
    {
        // Create empty args array for demos that need it
        var emptyArgs = Array.Empty<string>();
        
        while (true)
        {
            Console.Clear();
            AnsiConsole.Write(
                new FigletText("Open.Logging")
                    .Color(Color.Green)
                    .Centered());
                    
            AnsiConsole.WriteLine();
            
            var choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("Choose a demo to run:")
                    .PageSize(10)
                    .AddChoices(new[]
                    {
                        "1. Interactive Spectre Console Formatter Demo",
                        "2. File Logger Demo",
                        "3. File Logger with Rolling & Retention Demo",
                        "4. Test Console Logger Demo",
                        "9. Exit"
                    }));

            switch (choice)
            {
                case "1. Interactive Spectre Console Formatter Demo":
                    await FormatterDemoProgram.RunAsync().ConfigureAwait(false);
                    PauseForUser();
                    break;
                    
                case "2. File Logger Demo":
                    FileLoggerDemoProgram.RunDemo();
                    PauseForUser();
                    break;
                    
                case "3. File Logger with Rolling & Retention Demo":
                    await FileLoggerRollingDemoProgram.RunAsync(emptyArgs).ConfigureAwait(false);
                    PauseForUser();
                    break;
                    
                case "4. Test Console Logger Demo":
                    // This will continue to the test demo below
                    return await TestDemoAsync().ConfigureAwait(false);
                    
                case "9. Exit":
                    return 0;
            }
        }
    }

    /// <summary>
    /// Pauses execution until user presses a key.
    /// </summary>
    private static void PauseForUser()
    {
        Console.WriteLine();
        Console.WriteLine("Press any key to return to the menu...");
        Console.ReadKey(true);
    }

    /// <summary>
    /// This wraps the original test demo.
    /// </summary>
    private static async Task<int> TestDemoAsync()
    {
        // Create a service collection for DI
        var services = new ServiceCollection();

// DO NOT REMOVE THIS SECTION: It verifies the DI Configuration
#region DI Configuration Test
// Add logging with our Spectre Console formatter
services.AddLogging(logging =>
{
	// Clear default providers
	logging.ClearProviders();

	// Add Spectre console logger with options
	logging.AddSpectreConsole(options =>
	{
		options.Labels = new()
		{
			Information = "INFO-",
			Warning = "WARN!",
			Error = "ERROR",
			Critical = "CRIT!",
		};
		options.Theme = SpectreConsoleLogTheme.Default;
	});

	// Set minimum log level to Trace to see all log levels
	logging.SetMinimumLevel(LogLevel.Trace);
});

// Add our demo service
services.AddTransient<LoggingDemoService>();

// Build the service provider
var serviceProvider = services.BuildServiceProvider();

try
{
	// Get the demo service from DI and run it
	var demoService = serviceProvider.GetRequiredService<LoggingDemoService>();

	var rule = new Rule("[bold]Open.Logging.Extensions.SpectreConsole Demo[/]")
	{
		Style = Style.Parse("blue")
	};
	AnsiConsole.Write(rule);
	AnsiConsole.WriteLine();
	await demoService.RunAsync().ConfigureAwait(false);
	AnsiConsole.WriteLine();
	var endRule = new Rule("[bold]Demo Complete[/]")
	{
		Style = Style.Parse("blue")
	};
	AnsiConsole.Write(endRule);

}
catch (Exception ex)
{
	AnsiConsole.WriteException(ex);
	return 1;
}
#endregion

// -------------------- Theme Demonstrations --------------------

// Display a heading for the theme demos
AnsiConsole.WriteLine();
var themeDemoRule = new Rule("[bold yellow]Theme Demonstrations[/]")
{
	Style = Style.Parse("yellow")
};
AnsiConsole.Write(themeDemoRule);
AnsiConsole.WriteLine();

// Get available themes
var themes = new[]
{
	("ModernColors", SpectreConsoleLogTheme.ModernColors),
	("TweakedDefaults", SpectreConsoleLogTheme.TweakedDefaults),
	("LightBackground", SpectreConsoleLogTheme.LightBackground),
	("Dracula", SpectreConsoleLogTheme.Dracula),
	("Monokai", SpectreConsoleLogTheme.Monokai),
	("SolarizedDark", SpectreConsoleLogTheme.SolarizedDark),
	("OneDark", SpectreConsoleLogTheme.OneDark)
};

// Demonstrate each theme
foreach (var (themeName, theme) in themes)
{
	// Display theme name
	AnsiConsole.WriteLine();
	var themeRule = new Rule($"[bold]Theme: {themeName}[/]")
	{
		Style = Style.Parse("cyan")
	};
	AnsiConsole.Write(themeRule);
	AnsiConsole.WriteLine();

	// Create a logger factory with the current theme
	using var loggerFactory = LoggerFactory.Create(builder =>
	{
		builder.ClearProviders();
		builder.AddSpectreConsole(options =>
		{
			options.Theme = theme;
			// Keep the same custom labels for consistency
			options.Labels = new()
			{
				Information = "INFO-",
				Warning = "WARN!",
				Error = "ERROR",
				Critical = "CRIT!",
			};
		});
		builder.SetMinimumLevel(LogLevel.Trace);
	});

	// Create logger and demo service
	var themeLogger = loggerFactory.CreateLogger<LoggingDemoService>();
	var themeDemo = new LoggingDemoService(themeLogger);

	// Run the demo with this theme
	await themeDemo.RunAsync().ConfigureAwait(false);
}

// Final message
AnsiConsole.WriteLine();
var finalRule = new Rule("[bold green]All Themes Demonstrated[/]")
{
	Style = Style.Parse("green")
};

AnsiConsole.Write(finalRule);

// Always pause when demoing
PauseForUser();

        return 0;
    }
}